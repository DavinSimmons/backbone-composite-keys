// Generated by CoffeeScript 1.3.3
(function() {
  var bind, _;

  _ = this._ || require('underscore');

  (typeof module !== "undefined" && module !== null ? module : {}).exports = bind = function(Backbone) {
    var set, _onModelEvent;
    set = Backbone.Model.prototype.set;
    _.extend(Backbone.Model.prototype, {
      _generateId: function(attrs) {
        var index, indexes, val, _i, _len, _ref;
        if (attrs == null) {
          attrs = this.attributes;
        }
        if (typeof this.idAttribute === 'string') {
          return attrs[this.idAttribute];
        }
        indexes = [];
        _ref = this.idAttribute;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          index = _ref[_i];
          if (!(val = attrs[index])) {
            return void 0;
          }
          indexes.push(val);
        }
        return indexes.join('-');
      },
      set: function(key, val, options) {
        var attr, attrs, unset;
        if (key == null) {
          return this;
        }
        if (_.isObject(key)) {
          attrs = key;
          options = val;
        } else {
          (attrs = {})[key] = val;
        }
        unset = options != null ? options.unset : void 0;
        if (attrs instanceof Backbone.Model) {
          attrs = attrs.attributes;
        }
        if (unset) {
          for (attr in attrs) {
            attrs[attr] = void 0;
          }
        }
        if (!this._validate(attrs, options)) {
          return false;
        }
        this._previousId = this.id;
        this.id = this._generateId(_.extend({}, this.attributes, attrs));
        return set.apply(this, arguments);
      }
    });
    _onModelEvent = Backbone.Collection.prototype._onModelEvent;
    _.extend(Backbone.Collection.prototype, {
      _onModelEvent: function(event, model, collection, options) {
        if (model && event === 'change' && model.id !== model._previousId) {
          delete this._byId[model._previousId];
          if (model.id != null) {
            this._byId[model.id] = model;
          }
        }
        return _onModelEvent.apply(this, arguments);
      }
    });
    return Backbone;
  };

  if (this.Backbone) {
    bind(Backbone);
  }

}).call(this);
